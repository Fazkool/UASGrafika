#ifndef TRANSF_H
#define TRANSF_H
#include<graphics.h>
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<math.h>
#include<dos.h>
#include<iostream.h>
#define ROUND(a) ((int) (a+0.5))

void DRAW2DFRAME();
void putxy(int ,int,int arr[],int);
void line2d(int ,int ,int,int ,int arr1[2],int arr2[2],int );
void rectangle2d(int,int ,int ,int );
void matrixMul(float P[1][3],float T[3][3]) ;
void matrixIdentity(float T[3][3]);
void translate_point(int,int,int,int);
void rotate_point(int ,int ,float );
void scale_point(int,int,float,float);
void reflect_point_X(int ,int );
void reflect_point_Y(int ,int );
void reflect_point_YEQX(int ,int );
void reflect_point_YEQNX(int ,int );

void shear_point_X(int ,int ,float );
void shear_point_Y(int ,int ,float );


int color=0;
int frame_length=1000;
int arryX[500];
int arryY[500];
int arry_nX[500];
int arry_nY[500];
int arrx_nX[500];
int arrx_nY[500];
int arrxX[500];
int arrxY[500];

int COUNTERY;
int COUNTERX;

int STORE_YLINE_X[200];
int STORE_YLINE_Y[200];
int STORE_XLINE_X[200];
int STORE_XLINE_Y[200];
///////////////////////////////////////////
/*  Matrix P stores the original coodinates of a point,Matrix P1
    stores the new coorinates of a point after transformation */
float P[1][3],P1[1][3];
float Persegi[4][2] =
    {
	{10,10},{10,1000},{1000,1000},{1000,10}
	};

int pivot_x,pivot_y;

void DRAW2DFRAME ()
{
      cleardevice();

      setcolor(YELLOW);
      outtextxy(325,15,"+Y:AXIS");
      outtextxy(580,245,"+X:AXIS");
      outtextxy(325,465,"-Y:AXIS");
      outtextxy(15,245,"-X:AXIS");

      int Length,i;
      float dx,dy,x,y;
      dx=dy=x=y=0;
      int x_start=319, y_start=239, x_end=319,y_end =0;

      ///////////////////////////////////////////////    POSITIVE Y-AXIS

      //Approximate the length of the line
      if(abs(x_end-x_start)>abs(y_end-y_start))
         Length=abs(x_end-x_start);
      else
         Length=abs(y_end-y_start);

      //Select the larger of dx or dy to be one raster unit
      dx=(x_end-x_start)/(float) Length;
      dy=(y_end-y_start)/(float) Length;


      x=x_start;
      y=y_start;
      i=0;
      int count2=0;
      while(i<=Length)
      {

         x=x+dx;
         y=y+dy;

         float a=x;
         float b=y;

         arryX[i]=a;
	 arryY[i]=b;

         i=i+1;
         count2=count2+1;
         if(count2==350)
           break;

      }

      count2=240;
      for( i=0;i<count2;i++)
        putpixel(arryX[i],arryY[i],DARKGRAY);

      //////////////////////////////   POSITIVE X-AXIS
      x_start=319, y_start=239, x_end=639,y_end =239;

      //Approximate the length of the line
      if(abs(x_end-x_start)>abs(y_end-y_start))
         Length=abs(x_end-x_start);
      else
         Length=abs(y_end-y_start);


      //Select the larger of dx or dy to be one raster unit
      dx=(x_end-x_start)/(float) Length;
      dy=(y_end-y_start)/(float) Length;

      x=x_start;
      y=y_start;
      i=0;
      int count1=0;
      while(i<=Length)
      {
         x=x+dx;
         y=y+dy;

         float a=x;
         float b=y;
         arrxX[i]=a;
	 arrxY[i]=b;

         i=i+1;
         count1=count1+1;
         if(count1==350)
           break;

      }
      count1=240;
      for(i=0;i<count1;i++)
      putpixel(arrxX[i],arrxY[i],DARKGRAY);

       /////////////////////////////////// NEGATIVE X-AXIS
       x_start=319, y_start=239, x_end=0,y_end =239;

      //Approximate the length of the line
      if(abs(x_end-x_start)>abs(y_end-y_start))
         Length=abs(x_end-x_start);
      else
         Length=abs(y_end-y_start);


      //Select the larger of dx or dy to be one raster unit
      dx=(x_end-x_start)/(float) Length;
      dy=(y_end-y_start)/(float) Length;


      x=x_start;
      y=y_start;
      i=0;
      int count5=0;
      while(i<=Length)
      {
         x=x+dx;
         y=y+dy;

         float a=x;
         float b=y;
         arrx_nX[i]=a;
	 arrx_nY[i]=b;

         i=i+1;
         count5=count5+1;
         if(count5==350)
           break;

      }
      count5=240;
      for(i=0;i<count5;i++)
      putpixel(arrx_nX[i],arrx_nY[i],DARKGRAY);

      ////////////////////////////////////////////////    NEGATIVE Y-AXIS
      dx=dy=x=y=0;
      x_start=319, y_start=239, x_end=319,y_end =479;

       //Approximate the length of the line
      if(abs(x_end-x_start)>abs(y_end-y_start))
         Length=abs(x_end-x_start);
      else
         Length=abs(y_end-y_start);


      //Select the larger of dx or dy to be one raster unit
      dx=(x_end-x_start)/(float) Length;
      dy=(y_end-y_start)/(float) Length;

      x=x_start;
      y=y_start;
      i=0;
      int count4=0;
      while(i<=Length)
      {
         x=x+dx;
         y=y+dy;
         int a=x;
         int b=y;
         arry_nX[i]=a;
         arry_nY[i]=b;

	 i=i+1;
         count4=count4+1;
         if(count4==350)
           break;

      }
       count4=240;
       for(i=0;i<count4;i++)
     putpixel(arry_nX[i],arry_nY[i],DARKGRAY);


}

void putxy(int X,int Y,int arr[],int color)
{

      int DX=X;
      int DY=Y;

      Y=(int)Y/(int)(frame_length/100);
      X=(int)X/(int)(frame_length/100);

      int X1,Y1;
      int tempx,tempy;
      COUNTERX=COUNTERY=0;

      ///////////////////////////////////////////////////////(+x+y)
      if((X>=0)&&(Y>=0))
      {
       for( int i=0;i<=300;i++)
       {
           if(i==Y )
              break;
           COUNTERY=COUNTERY+1;

       }

       for(  i=0;i<=300;i++)
       {

         if(i==X )
            break;

         COUNTERX=COUNTERX+1;
       }


       int diffXY=0;
       int diffYX=0;

       int big;
       if((COUNTERY-COUNTERX)  >=0)
	  big=COUNTERY;
       else
          big=COUNTERX;


       for( i=0;i<=big;i++)
       {
          int Xx,Yx;
          Xx=arrxX[COUNTERX]+diffXY;     //from X axis
          Yx=arryY[i];
          STORE_XLINE_X[i]=Xx;
          STORE_XLINE_Y[i]=Yx;
	  int Xy,Yy;                        //fromr Y axis
	  Xy=arrxX[i]-diffYX;
          Yy=arryY[COUNTERY];

          STORE_YLINE_X[i]=Xy;
          STORE_YLINE_Y[i]=Yy ;


      }

           if((big-Y)  ==0)
           {
           moveto(STORE_XLINE_X[i-1],STORE_XLINE_Y[i-1]);
	   }
	   else
           {
           moveto(STORE_YLINE_X[i-1],STORE_YLINE_Y[i-1]);
           }

           X1=getx();
           Y1=gety();
           arr[0]=X1;
           arr[1]=Y1;
           putpixel(X1,Y1,color);

           return;

    }


      ///////////////////////////////////////////////////////////(-x-y)
      if(X<0&&Y<0)
      {

       for( int i=0;i<=300;i++)
       {
           if(i==abs(Y) )
              break;
           COUNTERY=COUNTERY+1;

       }

       for(  i=0;i<=300;i++)
       {

         if(i==abs(X) )
            break;

         COUNTERX=COUNTERX+1;
       }


       int diffXY=0;
       int diffYX=0;

       int big;
       if((abs(Y)-abs(X))  >0)
          big=abs(Y);
       else
          big=abs(X);


       for( i=0;i<=big;i++)
       {
          int Xx,Yx;
	  Xx=arrx_nX[COUNTERX]-diffXY;     //from X axis
	  Yx=arry_nY[i];

          STORE_XLINE_X[i]=Xx;
          STORE_XLINE_Y[i]=Yx;

          int Xy,Yy;                        //fromr Y axis
          Xy=arrx_nX[i]+diffYX;
          Yy=arry_nY[COUNTERY];
          STORE_YLINE_X[i]=Xy;
          STORE_YLINE_Y[i]=Yy ;

         }

	   if((big-abs(Y))  ==0)
           {

           moveto(STORE_XLINE_X[i-1],STORE_XLINE_Y[i-1]);
           }
           else
           {

           moveto(STORE_YLINE_X[i-1],STORE_YLINE_Y[i-1]);
           }

           X1=getx();
	   Y1=gety();
	   arr[0]=X1;
           arr[1]=Y1;
           putpixel(X1,Y1,color);
        return;

    }

     //////////////////////////////////////// (-x+y)
     if((X<0)&&(Y>=0))
     {
       for( int i=0;i<=300;i++)
       {
	   if(i==Y )
	      break;
           COUNTERY=COUNTERY+1;

       }

       for(  i=0;i<=300;i++)
       {

         if(i==abs(X) )
            break;

         COUNTERX=COUNTERX+1;
       }


       int diffXY=0;
       int diffYX=0;

       int big;
       if((Y-abs(X))  >=0)
          big=Y;
       else
          big=abs(X);


       for( i=0;i<=big;i++)
       {
          int Xx,Yx;
          Xx=arrx_nX[COUNTERX];     //from X axis
          Yx=arryY[i]-diffXY;

          STORE_XLINE_X[i]=Xx;
          STORE_XLINE_Y[i]=Yx;


          int Xy,Yy;                        //fromr Y axis
          Xy=arrx_nX[i];
          Yy=arryY[COUNTERY]+diffYX;
	  STORE_YLINE_X[i]=Xy;
	  STORE_YLINE_Y[i]=Yy ;


       }

           if(abs(Y)>abs(X))
           {
           moveto(STORE_XLINE_X[i-1],STORE_XLINE_Y[i-1]);
           }
           else
           {
           moveto(STORE_YLINE_X[i-1],STORE_YLINE_Y[i-1]);
	   }

           X1=getx();
           Y1=gety();
           arr[0]=X1;
           arr[1]=Y1;

           putpixel(X1,Y1,color);

           return;


    }

    //////////////////////////////////////////////////(+x-y)
    if((X>=0)&&(Y<0))
     {
       for( int i=0;i<=300;i++)
       {
           if(i==abs(Y) )
              break;
           COUNTERY=COUNTERY+1;

       }

       for(  i=0;i<=300;i++)
       {

         if(i==X )
            break;

         COUNTERX=COUNTERX+1;
       }


       int diffXY=0;
       int diffYX=0;

       int big;
       if((abs(Y)-X)  >=0)
	  big=abs(Y);
       else
          big=X;


       for( i=0;i<=big;i++)
       {
          int Xx,Yx;
          Xx=arrxX[COUNTERX];     //from X axis
          Yx=arry_nY[i]+diffXY;


	  STORE_XLINE_X[i]=Xx;
	  STORE_XLINE_Y[i]=Yx;
          int Xy,Yy;                        //fromr Y axis
          Xy=arrxX[i];
          Yy=arry_nY[COUNTERY]-diffYX;

          STORE_YLINE_X[i]=Xy;
          STORE_YLINE_Y[i]=Yy ;




           }

	   if(abs(Y)>abs(X))
           {
           moveto(STORE_XLINE_X[i-1],STORE_XLINE_Y[i-1]);
           }
           else
           {
           moveto(STORE_YLINE_X[i-1],STORE_YLINE_Y[i-1]);
           }

           X1=getx();
           Y1=gety();
           arr[0]=X1;
	   arr[1]=Y1;
	   putpixel(X1,Y1,color);


        return;


    }



}

void line2d(int x1,int y1,int x2,int y2,int arr1[2],int arr2[2],int color)
{

    putxy(x1,y1,arr1,color);
    putxy(x2,y2,arr2,color);
    setcolor(color);
    line(arr1[0],arr1[1],arr2[0],arr2[1]);

}


void matrixMul(float P[1][3],float T[3][3])
{

     int i,j,k;

     //Initialize Matrix P1 with Zero
     for(i=0;i<3;i++)
	 P1[0][i]=0;

     //Mutiply T with P and store the result in P1
     for(k=0;k<1;k++)
       for(i=0;i<3;i++)
       for(j=0;j<3;j++)
	P1[k][i]+=P[k][j]*T[j][i];

}

void matrixIdentity(float T[3][3])
{

     int i,j;

    /*  Make matrix T as Identity Matrix by
    Storing 1 in the left diagonal positions of Matrix T
    and store 0 in other positions  */

     for(i=0;i<3;i++)
     {
     for(j=0;j<3;j++)
     {
	 if(i==j)
	   T[i][j]=1;
	 else
	   T[i][j]=0;

      }

     }


}

void translate_point(int x,int y,int tx,int ty)
//Translate a point by translation factors tx,ty
{

     float T[3][3];
     matrixIdentity(T);
     T[2][0]=tx;
     T[2][1]=ty;

     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;

     matrixMul(P,T);
}

void rotate_point(int x,int y,float angle)
// Rotate a point by given angle
{
	
     float R[3][3];
     float radian;
	angle*=-1;
     radian=(3.141/180)*angle;
     matrixIdentity(R);

     R[0][0]=cos(radian);
     R[1][0]=-1*sin(radian);
     R[2][0]=pivot_x*(1-cos(radian))+pivot_y*sin(radian);
     R[0][1]=sin(radian);
     R[1][1]=cos(radian);
     R[2][1]=pivot_y*(1-cos(radian))-pivot_x*sin(radian);

     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);

}

void scale_point(int x,int y,float sx,float sy)
/* Scale a point by scaling factors sx,sy and
   with respect to some fixed point  */
{

      float S[3][3];
      matrixIdentity(S);

      S[0][0]=sx;
      S[2][0]=(1-sx)*pivot_x;
      S[1][1]=sy;
      S[2][1]=(1-sy)*pivot_y;

      P[0][0]=x;
      P[0][1]=y;
      P[0][2]=1;

      matrixMul(P,S);

}

void reflect_point_X(int x,int y)

{

     float R[3][3];


     matrixIdentity(R);

     R[1][1]=-1;


     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);

}

void reflect_point_Y(int x,int y)
{
     float R[3][3];
     matrixIdentity(R);
     R[0][0]=-1;
     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);
}

void shear_point_X(int x,int y,float shx)
{

     float R[3][3];

     matrixIdentity(R);

     R[1][0]=shx;
     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);

}

void shear_point_Y(int x,int y,float shy)
{

      float R[3][3];
      matrixIdentity(R);
      R[0][1]=shy;
      P[0][0]=x;
      P[0][1]=y;
      P[0][2]=1;
      matrixMul(P,R);

}

void reflect_point_YEQX(int x,int y)

{

     float R[3][3];


     matrixIdentity(R);
     R[0][0]=0;
     R[1][0]=1;
     R[0][1]=1;
     R[1][1]=0;


     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);

}

void reflect_point_YEQNX(int x,int y)

{

     float R[3][3];


     matrixIdentity(R);

     R[0][0]=0;
     R[1][0]=-1;
     R[0][1]=-1;
     R[1][1]=0;
     P[0][0]=x;
     P[0][1]=y;
     P[0][2]=1;
     matrixMul(P,R);

}


void gambarKotak()
{

    int arr1[2],arr2[2],arr3[2],arr4[2];
	line2d(Persegi[0][0],Persegi[0][1],Persegi[1][0],Persegi[1][1],arr1,arr2,YELLOW);
	line2d(Persegi[0][0],Persegi[0][1],Persegi[3][0],Persegi[3][1],arr1,arr2,YELLOW);
	line2d(Persegi[1][0],Persegi[1][1],Persegi[2][0],Persegi[2][1],arr1,arr2,YELLOW);
	line2d(Persegi[2][0],Persegi[2][1],Persegi[3][0],Persegi[3][1],arr1,arr2,YELLOW);
  
}
#endif