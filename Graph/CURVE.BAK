#ifndef CURVE_H
#define CURVE_H
#include <graphics.h>
#include <stdlib.h>
#include <iostream.h>
#include <math.h>
float getBx(int x[],int n,float t){
	if(n == 1){
		float xx = (float)x[0];
		return xx;
	}else{
		int* recXKiri;
		int* recXKanan;
		recXKiri = (int*) malloc((n-1)*sizeof (int));
		recXKanan = (int*) malloc((n-1)*sizeof (int));
		for(int i = 0;i<n-1;i++){
			recXKiri[i] = x[i];
			recXKanan[i] = x[i+1];
		}
		//recursive call
		return (1-t)*getBx(recXKiri,n-1,t)+t*getBx(recXKanan,n-1,t);
	}
}

float bCubic(int x[], float t){
	
}

void draw_curve(int x[],int y[],int n){
	for(float t = 0;t<1;t+=0.01){
		putpixel(getBx(x,n,t),getBx(y,n,t),WHITE);
	}
}

void bezier(int x[],int y[],int n){
	int faktorial(int);
	
	int sumx;
	int sumy;
	
	//cout << faktorial(n-i);
	for(t = 0.01;t<1;t+=0.01){
		sumx = 0;
		sumy = 0;
		for(i = 0;i<n;i++){
			sumx += faktorial(n) / faktorial(i) / faktorial(n-i) * pow((1-t),n-i) * pow(t,i) * x[i];
			sumy += faktorial(n) / faktorial(i) / faktorial(n-i) * pow((1-t),n-i) * pow(t,i) * y[i];
		}
		cout << sumx << " " << sumy << endl;
		putpixel(sumx,sumy,WHITE);
	}
}

int faktorial(int number){//MENGHITUNG FAKTORIAL
	if(number <1){
		return 1;
	}

	int i;
	int sum = 1;

	for(i = number;i>1;i--){
		sum *= i;
	}
	return sum;
}

#endif